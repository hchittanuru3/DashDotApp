{"version":3,"sources":["index.js","App.js","logo.png","serviceWorker.js"],"names":["ReactDOM","render","document","getElementById","serviceWorker","unregister","App","state","spinValue","Animated","Value","onClick","wasRotated","_value","timing","toValue","duration","easing","Easing","linear","start","spin","this","interpolate","inputRange","outputRange","View","style","styles","container","Image","source","logo","transform","rotate","Text","title","text","Platform","OS","TouchableHighlight","onPress","button","underlayColor","buttonText","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","color","fontWeight","fontSize","borderRadius","padding","marginVertical","marginTop","module","exports","config","navigator","URL","process","window","location","href","origin","addEventListener","swUrl","isLocalhost","fetch","headers","then","response","contentType","get","status","indexOf","ready","registration","reload","registerValidSW","catch","console","log","checkValidServiceWorker","error","message","Boolean","hostname","match","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess"],"mappings":"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","file":"static/js/main.01b98529.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Platform,\n  TouchableHighlight,\n  Animated,\n  Easing,\n} from 'react-native';\nimport logo from './logo.png';\n\nclass App extends Component {\n  state = {\n    spinValue: new Animated.Value(0),\n  };\n\n  onClick = () => {\n    const wasRotated = this.state.spinValue._value === 1;\n    Animated.timing(this.state.spinValue, {\n      toValue: wasRotated ? 0 : 1,\n      duration: 250,\n      easing: Easing.linear,\n    }).start();\n  };\n\n  render() {\n    const spin = this.state.spinValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: ['0deg', '360deg'],\n    });\n\n    return (\n      <View style={styles.container}>\n        <Animated.Image\n          source={logo}\n          style={[styles.logo, {transform: [{rotate: spin}]}]}\n        />\n        <Text style={styles.title}>Create React Native Web App</Text>\n        <Text style={styles.text}>\n          Open up src/App.js to start working on your app!\n        </Text>\n        <Text style={styles.text}>\n          Changes you make will automatically reload.\n        </Text>\n        {Platform.OS !== 'web' && (\n          <Text style={styles.text}>\n            Shake your phone to open the developer menu.\n          </Text>\n        )}\n        <TouchableHighlight\n          onPress={this.onClick}\n          style={styles.button}\n          underlayColor={'#0A84D0'}>\n          <Text style={styles.buttonText}>Rotate Logo</Text>\n        </TouchableHighlight>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#282c34',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 300,\n    height: 300,\n  },\n  title: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  text: {\n    color: '#fff',\n  },\n  button: {\n    borderRadius: 3,\n    padding: 20,\n    marginVertical: 10,\n    marginTop: 10,\n    backgroundColor: '#1B95E0',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.7940e6ce.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}